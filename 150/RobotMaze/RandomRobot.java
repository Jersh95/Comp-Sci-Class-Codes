/**
 *Program: Robot Maze
 * Program Purpose: This program will visually display the robot to navigate through the maze
 * Author: Josh Jacobsen
 * Date: 4-13-15
 * 
 * I worked with Sujan to figure out some details in the logic of the gui
 * 
 *Algorithm:
 *Create the constructor 
 *Override the chooseMoveDirection method that will randomly generate a number between 0-4(not including 4) that determines the direction the robot will move
 *Override the move method that will take in the direction that was generated by the chooseMoveDirection method and will assign the robot's new position in the maze as
 *long as the cell is available to move to
 */
package robotMaze;
import java.util.Random;


public class RandomRobot extends Robot
{
	private int moveCounter = 0;

	/**
	 * this is the constructor fot the RandomRobot class
	 * @param - this is an instance of the Maze class
	 */
	public RandomRobot(Maze inMaze) 
	{	
		super(inMaze);
	}

	/**
	 * this method randomly generates a number between 0 and 4 (not including 4) that determines which direction the robot will move to
	 * the robot will only move one space at a time
	 * @return - this returns the number for the robot's direction
	 */
	public int chooseMoveDirection() 
	{
		Random randomInt = new Random();
		int direction = randomInt.nextInt(4);
		return direction;
	}

	/**
	 * this method actually moves the robot
	 * @param - this is the direction that has been randomly rolled for the robot to move to
	 * @return - this will return true if the move has been made or false if the move has not been made
	 */
	public boolean move(int direction) 
	{		
		boolean moveMade = false;
		/**
		 * this section of code is for the robot moving north
		 */
		if(direction == 0 && checkCell(this.getCurrentRow() - 1, this.getCurrentColumn()) == true)
		{
			//The robot will move north
			//if(checkCell(this.getCurrentRow() - 1, this.getCurrentColumn()) == true)
			//{
			this.setEmptyCell(this.getCurrentRow(), this.getCurrentColumn());
			this.setCurrentCell(this.getCurrentRow() - 1, this.getCurrentColumn());
			moveMade = true;
			//moveCounter ++;
			//System.out.println("This is move #" + moveCounter + " for the robot.");
			//}
		}

		/**
		 * this section of code is for the robot moving south
		 */
		else if(direction == 1 && checkCell(this.getCurrentRow() + 1, this.getCurrentColumn()) == true)
		{
			//The robot will move south
			//if(checkCell(this.getCurrentRow() + 1, this.getCurrentColumn()) == true)
			//{
			this.setEmptyCell(this.getCurrentRow(), this.getCurrentColumn());
			this.setCurrentCell(this.getCurrentRow() + 1, this.getCurrentColumn());
			moveMade = true;
			//moveCounter ++;
			//System.out.println("This is move #" + moveCounter + " for the robot.");
			//}
		}

		/**
		 * this section of code is for the robot moving west
		 */
		else if(direction == 2 && checkCell(this.getCurrentRow(), this.getCurrentColumn() - 1) == true)
		{
			//The robot will move west
			//if(checkCell(this.getCurrentRow(), this.getCurrentColumn() - 1) == true)
			//{
			this.setEmptyCell(this.getCurrentRow(), this.getCurrentColumn());
			this.setCurrentCell(this.getCurrentRow(), this.getCurrentColumn() - 1);
			moveMade = true;
			//moveCounter ++;
			//System.out.println("This is move #" + moveCounter + " for the robot.");
			//}
		}

		/**
		 * this section of code is for the robot moving east
		 */
		else if(direction == 3 && checkCell(this.getCurrentRow(), this.getCurrentColumn() + 1) == true)
		{
			//The robot will move east	
			//if(checkCell(this.getCurrentRow(), this.getCurrentColumn() + 1) == true)
			//{
			this.setEmptyCell(this.getCurrentRow(), this.getCurrentColumn());
			this.setCurrentCell(this.getCurrentRow(), this.getCurrentColumn() + 1);
			moveMade = true;
			//moveCounter ++;
			//System.out.println("This is move #" + moveCounter + " for the robot.");
			//}
		}
		return moveMade;
	}
}
